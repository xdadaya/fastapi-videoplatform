version: "3"


services:
  db:
    container_name: db_videoplatform
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: videoplatform
      PGDATA: /data/postgresc
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    container_name: mongodb
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=video_statistics
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/video_statistics --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  rabbitmq:
    container_name: rabbitmq
    image: public.ecr.aws/docker/library/rabbitmq:3
    ports:
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 15s
      retries: 10

  user_service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
    ports:
      - "5000:5000"
    entrypoint: /user_service_entrypoint.sh
    volumes:
      - ./user_service:/app/user_service
    healthcheck:
      test: curl --fail http://localhost:5000/docs || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  video_service:
    build:
      context: .
      dockerfile: video_service/Dockerfile
    ports:
      - "5100:5100"
    entrypoint: /video_service_entrypoint.sh
    volumes:
      - ./video_service:/app/video_service
    healthcheck:
      test: curl --fail http://localhost:5100/docs || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  statistics_service:
    build:
      context: .
      dockerfile: statistics_service/Dockerfile
    ports:
      - "5200:5200"
    entrypoint: /statistics_service_entrypoint.sh
    volumes:
      - ./statistics_service:/app/statistics_service
    healthcheck:
      test: curl --fail http://localhost:5200/docs || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      mongo:
        condition: service_healthy

  consumer:
    build:
      context: .
      dockerfile: statistics_service/Dockerfile
    entrypoint: /consumer_entrypoint.sh
    volumes:
      - ./statistics_service:/app/statistics_service
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes:
  postgres: